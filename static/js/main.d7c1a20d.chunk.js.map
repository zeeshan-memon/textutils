{"version":3,"sources":["components/AboutUs.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["AboutUs","useState","color","backgroundColor","myStyle","setmyStyle","btnText","setbtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","toggleMode","role","htmlFor","TextForm","text","settext","heading","value","onChange","event","target","background","rows","toUpperCase","showAlert","toLowerCase","split","length","Alert","alert","class","word","lower","charAt","slice","capitalize","message","defaultProps","searchBar","App","setmode","setAlert","setColor","colorPicker","setColorPicker","setTimeout","document","body","showColorPicker","setColorPickerColor","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d7c1a20d.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function AboutUs() {\r\n    const [myStyle, setmyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    });\r\n    const [btnText, setbtnText] = useState(\"Enabled Light Mode\")\r\n    const toggleStyle = ()=>{\r\n        if(myStyle.color === 'white'){\r\n            setmyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            });\r\n            setbtnText(\"Enabled Light Mode\")\r\n        }else{\r\n            setmyStyle({\r\n                color:'white',\r\n                backgroundColor:'black',\r\n                border: '1px solid white'\r\n            });\r\n            setbtnText(\"Enabled Dark Mode\")\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container my-3\" style={myStyle}>\r\n            <h1 className=\"my-3\" style={myStyle}>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n            <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\">{btnText}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { SketchPicker } from 'react-color'\r\nimport { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item active\">\r\n                <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode=== \"light\"?\"Enable DarkMood\":\"Disable DarkMood\"}</label>\r\n        </div>\r\n        {/* <button type=\"button\" className=\"btn btn-dark btn-sm\"  onClick={props.showColorPicker} style={{backgroundColor :props.color}}>Change Color</button>\r\n        {props.colorPicker && <SketchPicker color={props.color} onChange={updateColor => props.setColorPickerColor(updateColor.hex)}/>} */}\r\n          </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\ntitle: PropTypes.string.isRequired,\r\nsearchBar: PropTypes.bool.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\ntitle:'TextUtils',\r\nsearchBar:true,\r\ncolor: '#1E6738'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        settext(text.toUpperCase());\r\n        props.showAlert('Text converted in uppercase', 'success');\r\n    }\r\n    const handleLoClick = ()=>{\r\n        settext(text.toLowerCase());\r\n        props.showAlert('Text converted in lowecase', 'success');\r\n\r\n    }\r\n    const handleClearClick = ()=>{\r\n        settext(\"\")\r\n    }\r\n    const changeText = (event)=>{\r\n        settext(event.target.value)\r\n        }\r\n    const [text, settext] = useState(\"\")\r\n    return (\r\n     <>   \r\n      <div className=\"container mb-3\" style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>\r\n          <h2>{props.heading}</h2>\r\n          <div className=\"mb-3\">  \r\n        <textarea className=\"form-control\" value={text} onChange={changeText} style={{background:props.mode===\"dark\"?\"#585858\":\"white\", color:props.mode===\"dark\"?\"white\":\"black\"}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.mode===\"dark\"?\"white\":\"black\"}}>\r\n          <h1>Your Text Summary</h1>\r\n          <p>{text.split(\" \").length} words, {text.length} character </p>\r\n          <p>{0.008 * text.split(\" \").length} read in minutes</p>\r\n          <h2>Preview</h2>\r\n          <p>{text.length>0?text:\"Enter something in the textbox above to preview here.\"}</p>\r\n      </div>\r\n      </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n      props.alert && <div>\r\n                        <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.message}\r\n                         </div>\r\n                     </div>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/AboutUs';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport { Routes, Route} from \"react-router-dom\"; \n\nfunction App() {\nconst [mode, setmode] = useState('light');\nconst [alert, setAlert] = useState(null);\nconst [color, setColor] = useState('white');\nconst [colorPicker, setColorPicker] = useState(false);\nconst showAlert = (message, type)=>{\n  setAlert({\n    message:message,\n    type:type\n  });\n  setTimeout(() => {\n    setAlert(null)\n  }, 1500);\n}\nconst toggleMode = ()=>{\n  if(mode === 'light'){\n    setmode('dark');\n    document.body.style.backgroundColor = '#030a2a';\n    showAlert(\"Dark mode has been enabled\",\"success\");\n    document.title = 'Textutils dark Mode';\n  }else{\n    setmode('light');\n    document.body.style.backgroundColor = 'white';\n    showAlert(\"Light mode has been enabled\",\"success\");\n    document.title = 'Textutils Light Mode';\n  }\n  \n}\nconst showColorPicker = ()=>{\n  setColorPicker(colorPicker => !colorPicker); \n}\nconst setColorPickerColor = (color)=>{\n  setColor(color); \n  document.body.style.backgroundColor = color;\n}\n  return (\n    <>\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} showColorPicker={showColorPicker} colorPicker={colorPicker} setColorPickerColor={setColorPickerColor} color={color}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    <Routes>\n        <Route exact path=\"/\" element={<TextForm heading=\"Enter text for analyze below\" mode={mode} showAlert={showAlert}/>} />\n        <Route exact path=\"about\" element={<About />} />\n      </Routes>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}